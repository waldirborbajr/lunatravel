// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma init --datasource-provider sqlite
// npx prima migrate dev â€”name init
// npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// datasource db {
//  provider = "mysql"
//   url      = env("DATABASE_URL")
//}

model City {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  Customer   Customer[]

  @@index([name])
  @@map("city")
}

model Identification {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  Customer   Customer[]

  @@index([name])
  @@map("identification")
}

model ClassCustomer {
  id           Int        @id @default(autoincrement())
  name         String
  seeincompany Boolean
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?
  Customer     Customer[]

  @@index([name])
  @@map("classcutomer")
}

model Bank {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  agency     String
  account    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([name])
  @@map("bank")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  username   String    @unique
  password   String
  // role       Role      @default(USER)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  sessionId  Int?

  @@index([name])
  @@map("user")
}

// birthDate DateTime @db.Date
model Customer {
  id               Int             @id @default(autoincrement())
  name             String
  city             City?           @relation(fields: [cityId], references: [id])
  classcutomer     ClassCustomer?  @relation(fields: [classCustomerId], references: [id])
  indetification   Identification? @relation(fields: [identificationId], references: [id])
  zipcode          String
  address          String
  phone1           String
  phone2           String
  email            String
  birthDate        DateTime
  idcardnumber     String
  comission        Float
  attention        String
  restriction      Boolean
  active           Boolean
  picturepath      String
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  deleted_at       DateTime?
  Parameter        Parameter[]
  cityId           Int?
  classCustomerId  Int?
  identificationId Int?
  cashflow         Cashflow[]

  @@index([name])
  @@map("customer")
}

// prince Decimal  @mysql.Decimal(10, 2)
model Parameter {
  id                 Int       @id @default(autoincrement())
  customer           Customer  @relation(fields: [customerId], references: [id])
  customerId         Int
  exchange_vl_month  Float     @default(0.00)
  exchange_vl_year   Float     @default(0.00)
  exchange_comission Float     @default(0.00)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  @@map("parameter")
}

model Cashflow {
  id                     Int       @id @default(autoincrement())
  datecashflow           DateTime
  tcsahflow              Decimal
  amountcashflow         Decimal
  valuecashflow          Decimal
  centsone               Decimal
  centstwo               Decimal
  checknumber            String
  precentcashflow        Decimal
  valuepercentcashflow   Decimal
  airpercentcashflow     Decimal
  aircomissioncashflow   Decimal
  airreservationcashflow Decimal
  airdateemitcashflow    Decimal
  subtotalcashflow       Decimal
  totalcashflow          Decimal
  totaltopaycashflow     Decimal
  wirecashflow           Decimal
  vincashflow            Decimal
  description            String
  observation            String
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  deleted_at             DateTime?
  customer               Customer? @relation(fields: [customerId], references: [id])
  customerId             Int?

  @@map("cashflow")
}

//enum Role {
//  USER
//  ADMIN
//}
